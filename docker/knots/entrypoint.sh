#!/bin/sh
# This script acts as an entrypoint for the bitcoind container.
# It retrieves RPC credentials and other configurations from environment
# variables, generates a bitcoin.conf file, and then starts bitcoind.

set -e

# Default Bitcoin data directory, should match DIR in Dockerfile
BITCOIN_DATA_DIR=${BITCOIN_DATA_DIR:-/data/.bitcoin}
CONFIG_FILE="${BITCOIN_DATA_DIR}/bitcoin.conf"

# Use provided RPC user/password or fallback to defaults
RPC_USER=${RPC_USER:-rpcuser}
RPC_PASSWORD=${RPC_PASSWORD:-rpcpassword}

# Use provided ZMQ/RPC/DataCarrierSize settings or fallback to defaults
ZMQ_PUB_RAW_BLOCK=${ZMQ_PUB_RAW_BLOCK:-tcp://0.0.0.0:28332}
ZMQ_PUB_RAW_TX=${ZMQ_PUB_RAW_TX:-tcp://0.0.0.0:28333}
RPC_BIND=${RPC_BIND:-0.0.0.0}
RPC_ALLOW_IP=${RPC_ALLOW_IP:-0.0.0.0/0}
DATA_CARRIER_SIZE=${DATA_CARRIER_SIZE:-0} # Default to 0 (standard)
REINDEX=${REINDEX:-0}
REINDEX_CHAINSTATE=${REINDEX_CHAINSTATE:-0}
# Create the Bitcoin data directory if it doesn't exist
# This is also done in the Dockerfile, but good to ensure here
mkdir -p "$BITCOIN_DATA_DIR"

echo "Generating bitcoin.conf..."
cat << EOF > "$CONFIG_FILE"
# Bitcoin Core Configuration File
# Generated by entrypoint.sh

# RPC Settings
rpcuser=${RPC_USER}
rpcpassword=${RPC_PASSWORD}
rpcbind=${RPC_BIND}
rpcallowip=${RPC_ALLOW_IP}

# ZMQ Settings
zmqpubrawblock=${ZMQ_PUB_RAW_BLOCK}
zmqpubrawtx=${ZMQ_PUB_RAW_TX}

# Data Carrier Size
datacarrier=${DATA_CARRIER_SIZE}

# Add any other static configurations you need below
# For example:
# server=1
# txindex=1
# printtoconsole=1

EOF

# Conditionally add reindex flags
if [ "${REINDEX}" -eq 1 ]; then
  echo "reindex=1" >> "${CONFIG_FILE}"
fi
if [ "${REINDEX_CHAINSTATE}" -eq 1 ]; then
  echo "reindex-chainstate=1" >> "${CONFIG_FILE}"
fi

echo "Starting bitcoind..."
# Pass any additional command-line arguments ("$@")
exec /usr/local/bin/bitcoind -conf="${CONFIG_FILE}" "$@"