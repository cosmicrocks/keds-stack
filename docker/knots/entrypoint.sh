#!/bin/sh
# This script acts as an entrypoint for the bitcoind container.
# It retrieves RPC credentials and other configurations from environment
# variables, generates a bitcoin.conf file, and then starts bitcoind.
#
# Network Configuration:
# - Set NETWORK environment variable to: mainnet (default), testnet, or regtest
# - Invalid network values will cause the script to exit with an error

set -e

# Default Bitcoin data directory, should match DIR in Dockerfile
BITCOIN_DATA_DIR=${BITCOIN_DATA_DIR:-/data/.bitcoin}
CONFIG_FILE="${BITCOIN_DATA_DIR}/bitcoin.conf"

# Network configuration - validate network setting
NETWORK=${NETWORK:-mainnet}
case "${NETWORK}" in
  mainnet)
    echo "Starting bitcoind on mainnet"
    ;;
  testnet)
    echo "Starting bitcoind on testnet"
    ;;
  regtest)
    echo "Starting bitcoind on regtest"
    ;;
  *)
    echo "Error: Invalid NETWORK value '${NETWORK}'. Must be one of: mainnet, testnet, regtest"
    exit 1
    ;;
esac

# Use provided RPC user/password or fallback to defaults
RPC_USER=${RPC_USER:-rpcuser}
RPC_PASSWORD=${RPC_PASSWORD:-rpcpassword}

# Use provided ZMQ/RPC/DataCarrierSize settings or fallback to defaults
ZMQ_PUB_RAW_BLOCK=${ZMQ_PUB_RAW_BLOCK:-tcp://0.0.0.0:8432}
ZMQ_PUB_RAW_TX=${ZMQ_PUB_RAW_TX:-tcp://0.0.0.0:8431}
RPC_BIND=${RPC_BIND:-0.0.0.0}
RPC_PORT=${RPC_PORT:-8332}
RPC_ALLOW_IP=${RPC_ALLOW_IP:-0.0.0.0/0}
DATA_CARRIER_SIZE=${DATA_CARRIER_SIZE:-1}
REINDEX=${REINDEX:-0}
REINDEX_CHAINSTATE=${REINDEX_CHAINSTATE:-0}

# New environment variables for additional configurations
# Core Settings
SERVER_ENABLED=${SERVER_ENABLED:-1}
TXINDEX_ENABLED=${TXINDEX_ENABLED:-1}
PRINTTOCONSOLE_ENABLED=${PRINTTOCONSOLE_ENABLED:-1}

# Additional ZMQ
ZMQ_PUB_HASH_BLOCK=${ZMQ_PUB_HASH_BLOCK:-tcp://0.0.0.0:8433}

# Performance Tuning
DB_CACHE=${DB_CACHE:-100}
MAX_CONNECTIONS=${MAX_CONNECTIONS:-20}
RPC_WORK_QUEUE=${RPC_WORK_QUEUE:-8}
MAX_MEMPOOL=${MAX_MEMPOOL:-50}
BLOCK_RECONSTRUCTION_EXTRA_TXN=${BLOCK_RECONSTRUCTION_EXTRA_TXN:-5000}

# OCEAN Policy Compliance
ACCEPT_NON_STD_TXN=${ACCEPT_NON_STD_TXN:-0}
ACCEPT_NON_STD_DATA_CARRIER=${ACCEPT_NON_STD_DATA_CARRIER:-0}
DATA_CARRIER_COST=${DATA_CARRIER_COST:-1}
DATACARRIERSIZE_LIMIT=${DATACARRIERSIZE_LIMIT:-42}
BYTES_PER_SIGOP=${BYTES_PER_SIGOP:-20}
BYTES_PER_SIGOP_STRICT=${BYTES_PER_SIGOP_STRICT:-20}
MAX_SCRIPT_SIZE=${MAX_SCRIPT_SIZE:-1650}
MEMPOOL_FULL_RBF=${MEMPOOL_FULL_RBF:-1}
MEMPOOL_REPLACEMENT=${MEMPOOL_REPLACEMENT:-fee,-optin}
MIN_RELAY_TX_FEE=${MIN_RELAY_TX_FEE:-0.00001}
PERMIT_BARE_MULTISIG=${PERMIT_BARE_MULTISIG:-0}
PERMIT_BARE_PUBKEY=${PERMIT_BARE_PUBKEY:-0}
REJECT_PARASITES=${REJECT_PARASITES:-1}
SPK_REUSE=${SPK_REUSE:-allow}

# Mining Block Template
BLOCK_MAX_SIZE=${BLOCK_MAX_SIZE:-3985000}
BLOCK_MAX_WEIGHT=${BLOCK_MAX_WEIGHT:-3985000}
BLOCK_MIN_TX_FEE=${BLOCK_MIN_TX_FEE:-0.00001}
BLOCK_PRIORITY_SIZE=${BLOCK_PRIORITY_SIZE:-0}

# Datum Settings
DATUM_HOST=${DATUM_HOST:-127.0.0.1}
DATUM_PORT=${DATUM_PORT:-8080}

echo "Generating bitcoin.conf..."
cat << EOF > "$CONFIG_FILE"
# Bitcoin Core Configuration File
# Generated by entrypoint.sh

# ======== Network Configuration ========
EOF

# Add network-specific configuration
case "${NETWORK}" in
  testnet)
    echo "testnet=1" >> "$CONFIG_FILE"
    ;;
  regtest)
    echo "regtest=1" >> "$CONFIG_FILE"
    ;;
  mainnet)
    # No additional configuration needed for mainnet (default)
    ;;
esac

cat << EOF >> "$CONFIG_FILE"

# ======== Core Settings ========
server=${SERVER_ENABLED}
txindex=${TXINDEX_ENABLED}
printtoconsole=${PRINTTOCONSOLE_ENABLED}
rpcuser=${RPC_USER}
rpcpassword=${RPC_PASSWORD}
# Consider using cookie-based auth or rpcauth instead.
rpcbind=${RPC_BIND}
rpcport=${RPC_PORT}
rpcallowip=${RPC_ALLOW_IP}

# ======== ZMQ (for Electrs, etc.) ========
zmqpubrawtx=${ZMQ_PUB_RAW_TX}
zmqpubrawblock=${ZMQ_PUB_RAW_BLOCK}
zmqpubhashblock=${ZMQ_PUB_HASH_BLOCK}

# ======== Performance Tuning (adjust for your RAM) ========
dbcache=${DB_CACHE}
maxconnections=${MAX_CONNECTIONS}
rpcworkqueue=${RPC_WORK_QUEUE}
maxmempool=${MAX_MEMPOOL}
blockreconstructionextratxn=${BLOCK_RECONSTRUCTION_EXTRA_TXN}

# ======== OCEAN Policy Compliance ========
datacarrier=${DATA_CARRIER_SIZE} # (OCEAN requires this to be 1)
acceptnonstdtxn=${ACCEPT_NON_STD_TXN}
acceptnonstddatacarrier=${ACCEPT_NON_STD_DATA_CARRIER}
datacarriercost=${DATA_CARRIER_COST}
datacarriersize=${DATACARRIERSIZE_LIMIT}
bytespersigop=${BYTES_PER_SIGOP}
bytespersigopstrict=${BYTES_PER_SIGOP_STRICT}
maxscriptsize=${MAX_SCRIPT_SIZE}
mempoolfullrbf=${MEMPOOL_FULL_RBF}
mempoolreplacement=${MEMPOOL_REPLACEMENT} # (Enforce full RBF - OCEAN requires)
minrelaytxfee=${MIN_RELAY_TX_FEE}
permitbaremultisig=${PERMIT_BARE_MULTISIG}
permitbarepubkey=${PERMIT_BARE_PUBKEY}
rejectparasites=${REJECT_PARASITES}
spkreuse=${SPK_REUSE}

# ======== Mining Block Template ========
blockmaxsize=${BLOCK_MAX_SIZE}
blockmaxweight=${BLOCK_MAX_WEIGHT}
blockmintxfee=${BLOCK_MIN_TX_FEE}
blockprioritysize=${BLOCK_PRIORITY_SIZE}
blocknotify=${BITCOIN_DATA_DIR}/blocknotify.sh

EOF

# Conditionally add reindex flags
if [ "${REINDEX}" -eq 1 ]; then
  echo "reindex=1" >> "${CONFIG_FILE}"
fi
if [ "${REINDEX_CHAINSTATE}" -eq 1 ]; then
  echo "reindex-chainstate=1" >> "${CONFIG_FILE}"
fi

# Generate block notify script for datum
cat << 'EOF' > "${BITCOIN_DATA_DIR}/blocknotify.sh"
#!/bin/sh
# This script is called when a block is connected to the main chain
# It will trigger the datum script to update the datum
    wget -qO - http://${DATUM_HOST}:${DATUM_PORT}/NOTIFY
EOF

# Make the script executable
chmod +x "${BITCOIN_DATA_DIR}/blocknotify.sh"

# Add blocknotify to bitcoin.conf
echo "blocknotify=${BITCOIN_DATA_DIR}/blocknotify.sh" >> "${CONFIG_FILE}"

echo "Starting bitcoind..."
# Pass any additional command-line arguments ("$@")
exec /usr/local/bin/bitcoind -conf="${CONFIG_FILE}" "$@"